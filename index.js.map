{"version":3,"file":"index.js","sources":["src/inject.jsx","src/provider.jsx"],"sourcesContent":["import React from 'react'\nimport { autorun, isObservable, toJS } from 'mobx'\nimport shallowEqual from 'fbjs/lib/shallowEqual'\n\nexport default injectFunction => Component => class extends React.Component {\n  static contextTypes = {\n    mobxStores: () => null, // this is to avoid importing prop-types\n  }\n\n  constructor(props, context) {\n    super(props, context)\n\n    this.state = {\n      injectedProps: {},\n    }\n\n    let firstRun = true\n    this.readStore = nextProps => () => {\n      // rerun store mapping so the flat values are processed again\n      // FIXME: Pass this.props ? Then we should call\n      //        the whole function on `componentWillReceiveProps`\n      const injected = injectFunction(this.context.mobxStores, nextProps || this.props)\n\n      // copy to make sure we don't mutate an object that could be used by the inject\n      const injectedProps = { ...injected }\n\n      // flatten mobx observables\n      Object.keys(injectedProps).forEach((key) => {\n        const value = injectedProps[key]\n        if (isObservable(value)) {\n          injectedProps[key] = toJS(injectedProps[key])\n        }\n      })\n\n      // on first run we have to use this.state, not this.setState\n      if (firstRun) {\n        firstRun = false\n        this.state = { ...this.state, injectedProps }\n      } else if (!shallowEqual(injectedProps, this.state.injectedProps)) {\n        this.setState(prevState => ({ ...prevState, injectedProps }))\n      }\n    }\n\n    this.dispose = autorun(this.readStore())\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.readStore(nextProps)()\n  }\n\n  /* unbind observable reaction */\n  componentWillUnmount() {\n    this.dispose()\n  }\n\n  render() {\n    return (\n      <Component\n        /* this is parent props */\n        {...this.props}\n        /* this is injected props from hoc */\n        {...this.state.injectedProps}\n      />\n    )\n  }\n}\n","/* eslint-disable import/prefer-default-export */\nimport React, { Component } from 'react'\n\n// inspired from mobx-react/Provider :\n// -> https://github.com/mobxjs/mobx-react/blob/master/src/Provider.js\nexport default stores => WrappedComponent => class extends Component {\n  static contextTypes = {\n    mobxStores: () => null, // this is to avoid importing prop-types\n  }\n\n  static childContextTypes = {\n    mobxStores: () => null, // this is to avoid importing prop-types\n  }\n\n  getChildContext() {\n    // inner stores are inherit stores and newly injected\n    const mobxStores = {\n      ...this.context.mobxStores,\n      ...stores,\n    }\n\n    return {\n      mobxStores,\n    }\n  }\n\n  render() {\n    return <WrappedComponent {...this.props} />\n  }\n}\n"],"names":["props","context","state","firstRun","readStore","injected","injectFunction","_this","mobxStores","nextProps","injectedProps","keys","forEach","key","value","isObservable","toJS","shallowEqual","setState","prevState","dispose","autorun","React","Component","this","contextTypes","stores","WrappedComponent","childContextTypes"],"mappings":"o5CAIiC,sDAKnBA,EAAOC,4EACXD,EAAOC,MAERC,6BAIDC,GAAW,WACVC,UAAY,mBAAa,eAItBC,EAAWC,EAAeC,EAAKN,QAAQO,WAAYC,GAAaF,EAAKP,OAGrEU,OAAqBL,UAGpBM,KAAKD,GAAeE,QAAQ,SAACC,OAC5BC,EAAQJ,EAAcG,GACxBE,eAAaD,OACDD,GAAOG,OAAKN,EAAcG,OAKxCV,MACS,IACND,WAAaK,EAAKL,OAAOQ,mBACpBO,EAAaP,EAAeH,EAAKL,MAAMQ,kBAC5CQ,SAAS,wBAAmBC,GAAWT,wBAI3CU,QAAUC,UAAQd,EAAKH,kFAGJK,QACnBL,UAAUK,yDAKVW,kDAKHE,gBAACC,OAEKC,KAAKxB,MAELwB,KAAKtB,MAAMQ,uBAzDqCY,EAAMC,aACzDE,yBACO,kBAAM,yCCDG,iOAYhBD,KAAKvB,QAAQO,WACbkB,4CASEJ,gBAACK,EAAqBH,KAAKxB,cAtBqBuB,eAClDE,yBACO,kBAAM,SAGbG,8BACO,kBAAM"}